name: Coverage Badge

on:
  push:
    branches: [ main, Development ]
  pull_request:
    branches: [ main, Development ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm run test:ci-safe

    - name: Extract coverage percentage
      id: coverage
      run: |
        # Check if coverage file exists
        if [ ! -f "coverage/coverage-summary.json" ]; then
          echo "Coverage file not found!"
          exit 1
        fi
        
        # Extract coverage percentage using jq (more reliable)
        if command -v jq >/dev/null 2>&1; then
          COVERAGE=$(jq -r '.total.lines.pct // 0' coverage/coverage-summary.json)
        else
          # Fallback method without jq
          COVERAGE=$(node -e "
            const fs = require('fs');
            try {
              const data = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              console.log(data.total.lines.pct || 0);
            } catch (e) {
              console.log(0);
            }
          ")
        fi
        
        # Ensure COVERAGE is a valid number
        if ! [[ "$COVERAGE" =~ ^[0-9]+\.?[0-9]*$ ]]; then
          COVERAGE="0"
        fi
        
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        
        # Determine badge color based on coverage percentage
        if [ "$(echo "$COVERAGE >= 90" | bc -l 2>/dev/null || echo 0)" = "1" ]; then
          COLOR="brightgreen"
        elif [ "$(echo "$COVERAGE >= 80" | bc -l 2>/dev/null || echo 0)" = "1" ]; then
          COLOR="green"
        elif [ "$(echo "$COVERAGE >= 70" | bc -l 2>/dev/null || echo 0)" = "1" ]; then
          COLOR="yellow"
        elif [ "$(echo "$COVERAGE >= 60" | bc -l 2>/dev/null || echo 0)" = "1" ]; then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        echo "color=$COLOR" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"
        echo "Badge color: $COLOR"

    - name: Generate coverage badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: ${{ secrets.GIST_ID }}
        filename: coverage-badge.json
        label: Coverage
        message: ${{ steps.coverage.outputs.percentage }}%
        color: ${{ steps.coverage.outputs.color }}
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Development'
      continue-on-error: true

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.sha }}
        path: coverage/
        retention-days: 7